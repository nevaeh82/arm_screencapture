project(ZavScreenGrabber)
cmake_minimum_required(VERSION 3.5)

set(CONF_SUB_PATH "ZavScreenGrabber")

set(VERSION_SUFFIX "GIT")

include(CheckIncludeFile)
include(CheckIncludeFiles)
include(CheckFunctionExists)
include(FindPkgConfig)
include(CheckCXXSourceCompiles)
find_package(Git)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_CURRENT_SOURCE_DIR}/cmake")

set(CMAKE_AUTOMOC OFF)
set(CMAKE_AUTOUIC OFF)
set(CMAKE_AUTORCC OFF)

#if (CMAKE_VERSION VERSION_GREATER "3.0.0")
#	set(CMAKE_AUTOUIC OFF)
#	set(CMAKE_AUTORCC OFF)
#endif()

include(UsefulMacros)

option(INSTALL_RUNTIME_PATH "Install rpath" OFF)
option(INSTALL_RUNTIME_LIBS "Install runtime libs" OFF)
option(USE_SYSLOG "Use syslog instead qxtlogger" OFF)
option(USE_COVERAGE "Run coverage for statistics" OFF)
option(CREATE_TR "Dynamical create qrc with qm files" ON)
option(CREATE_BUNDLE "Create bundle on install" OFF)
option(USE_SHARED_OUTPUT "Place all build binaries on one common directory bin" OFF)
option(USE_QT5 "Build with Qt5" ON)
option(USE_LTO "Use lto" OFF)

set(_NEED_COMPORT OFF)
set(_NEED_QTSERVICE OFF)

option(NO_BACKTRACE "Build without backtrace" ON)

if(NO_BACKTRACE)
	add_definitions(-DNO_BACKTRACE)
endif()

include(CommonInit)
find_package(Threads REQUIRED)
find_package(ffmpeg REQUIRED)
find_package(QtAV REQUIRED)

if(USE_SHARED_OUTPUT)
	set( CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin )
	set( CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin )
	set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin )
endif()

if(USE_SYSLOG)
	add_definitions(-DUSE_SYSLOG)
endif()

list(APPEND qt_libs QtCore QtNetwork QtWinExtras)

if(USE_QT5)
	list(APPEND qt_libs QtSerialPort QtConcurrent)
endif()

if (CMAKE_CROSS_COMPILING)
	set(CMAKE_MODULE_PATH ${CROSS_CMAKE_MODULE_PATH}Qt5 ${CMAKE_MODULE_PATH})
	find_package(Qt5Core 5.0.0)
endif()

foreach(qt_lib ${qt_libs})
	if (NOT USE_QT5)
		find_package(Qt4 4.7.0 COMPONENTS ${qt_lib} REQUIRED)
	else()
		string(REPLACE "Qt" "Qt5" qt_lib ${qt_lib})
		if (CMAKE_CROSS_COMPILING)
			pkg_check_modules(${qt_lib} REQUIRED ${qt_lib}>=5.0.0)
		else()
			find_package(${qt_lib} 5.0.0 REQUIRED)
		endif()
	endif()
endforeach()

set(FULL_QT_VERSION "${QT_VERSION_MAJOR}.${QT_VERSION_MINOR}")

if(NOT USE_QT5)
	find_package(QSerialPort REQUIRED)
endif()

if(USE_QT5 AND CREATE_TR)
	#if (CMAKE_CROSS_COMPILING)
	#set(CMAKE_MODULE_PATH ${CROSS_CMAKE_MODULE_PATH}Qt5LinguistTools ${CMAKE_MODULE_PATH})
	#endif()
	find_package(Qt5LinguistTools REQUIRED)
endif()

add_definitions(-DQXT_STATIC -DBUILD_QXT) # FOR QXT

if(UNIX)
	find_package(X11)
endif()

add_definitions(-D_USE_MATH_DEFINES)

if(WIN32)
	add_definitions(-DUNICODE)
	find_package(LibSSL)
	if(LibSSL_LIBRARIES AND INSTALL_RUNTIME_LIBS)
		install(FILES ${LibSSL_LIBRARIES} DESTINATION ${LIBDIR})
	endif()
	find_package(Libgomp)
	if(Libgomp_LIBRARIES AND INSTALL_RUNTIME_LIBS)
		install(FILES ${Libgomp_LIBRARIES} DESTINATION ${LIBDIR})
	endif()
endif()

if(USE_QT5)
	find_package(Qt5Widgets 5.0.0 REQUIRED)
	list(APPEND qt_libs QtWidgets)
	if (UNIX AND CMAKE_CROSS_COMPILING)
		pkg_check_modules(Qt5XcbQpa REQUIRED Qt5XcbQpa>=5.0.0)
	endif()
endif()

list(APPEND qt_libs QtGui QtSvg)

foreach(qt_lib ${qt_libs})
	if (NOT USE_QT5)
		find_package(Qt4 4.7.0 COMPONENTS ${qt_lib} REQUIRED)
	else()
		string(REPLACE "Qt" "Qt5" qt_lib ${qt_lib})
		if (CMAKE_CROSS_COMPILING)
			find_package(${qt_lib} 5.0.0 REQUIRED)
			pkg_check_modules(${qt_lib} REQUIRED ${qt_lib}>=5.0.0)
		else()
			find_package(${qt_lib} 5.0.0 REQUIRED)
		endif()
	endif()
endforeach()

unset(QT_DONT_USE_QTGUI)

configure_file(
	"${PROJECT_SOURCE_DIR}/version.ini.in"
	"${PROJECT_BINARY_DIR}/version.ini")

configure_file(
	"${PROJECT_SOURCE_DIR}/Version.h.in"
	"${PROJECT_BINARY_DIR}/VersionGlobal.h")

include_directories(${PROJECT_BINARY_DIR})

add_subdirectory(src)

set(CPACK_PACKAGE_VERSION ${PROJECTVERSION})
set(CPACK_GENERATOR "TXZ")
set(CPACK_SET_DESTDIR ON)
set(CPACK_PACKAGE_FILE_NAME "${PROJECT_NAME_LOW}_${PROJECTVERSION}")
set(CPACK_INCLUDE_TOPLEVEL_DIRECTORY 0)

if(WIN32)
	set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/win32/)
	set(CPACK_SET_DESTDIR OFF)
	set(CPACK_PACKAGE_VENDOR "NTT")

	set(CPACK_PACKAGE_DESCRIPTION_SUMMARY ${CPACK_PACKAGE_NAME})
	set(CPACK_PACKAGE_INSTALL_DIRECTORY "${PROJECT_NAME}\\\\${CPACK_PACKAGE_NAME}_${PROJECTVERSION}")
	set(CPACK_PACKAGE_FILE_NAME "${CPACK_PACKAGE_NAME}Setup_${PROJECTVERSION}")
	set(CPACK_PACKAGE_INSTALL_REGISTRY_KEY ${CPACK_NSIS_DISPLAY_NAME})

	#Setting bat for remove previous
#	configure_file(
#		"${CMAKE_CURRENT_SOURCE_DIR}/win32/uninstallPrevious.bat"
#		"${PROJECT_BINARY_DIR}/uninstallPrevious.bat")

#	if ( (LANDCLIENT_ONLY OR LANDSERVER_ONLY) AND LANDSERVER_INSTALL_AS_SERVICE AND NOT LANDSERVER_INTERNAL)
#		set(preinst_land_serv_service_path "${CMAKE_CURRENT_SOURCE_DIR}/win32/preinstall/stop_land_serv_service.nsh")
#		string(REPLACE "/" "\\\\" preinst_land_serv_service_path_out ${preinst_land_serv_service_path})
#		set(CPACK_NSIS_EXTRA_PREINSTALL_COMMANDS "!include ${preinst_land_serv_service_path_out}")

#		set(inst_land_serv_service_path "${CMAKE_CURRENT_SOURCE_DIR}/win32/inst_land_serv_service.nsh")
#		string(REPLACE "/" "\\\\" inst_land_serv_service_path_out ${inst_land_serv_service_path})
#		set(CPACK_NSIS_EXTRA_INSTALL_COMMANDS "!include ${inst_land_serv_service_path_out}")

#		set(uninst_land_serv_service_path "${CMAKE_CURRENT_SOURCE_DIR}/win32/uninst_land_serv_service.nsh")
#		string(REPLACE "/" "\\\\" uninst_land_serv_service_path_out ${uninst_land_serv_service_path})
#		set(CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS "!include ${uninst_land_serv_service_path_out}")
#	endif()

#	if (LANDCLIENT_ONLY OR LANDSERVER_ONLY)
#		set(rem_previous_version_path "${CMAKE_CURRENT_SOURCE_DIR}/win32/uninst_previous_versions.nsh")
#		string(REPLACE "/" "\\\\" rem_previous_version_path ${rem_previous_version_path})
#		set(CPACK_NSIS_UNINSTALL_PREINSTALL_COMMANDS "!include ${rem_previous_version_path}")
#	endif()

#	if (LANDCLIENT_ONLY)
#		set(rem_map_cache_path "${CMAKE_CURRENT_SOURCE_DIR}/win32/inst_map_cache.nsh")
#		string(REPLACE "/" "\\\\" rem_map_cache_path ${rem_map_cache_path})
#		set(CPACK_NSIS_EXTRA_INSTALL_COMMANDS "${CPACK_NSIS_EXTRA_INSTALL_COMMANDS}\n !include ${rem_map_cache_path}")

#                set(rem_inst_firewall_path "${CMAKE_CURRENT_SOURCE_DIR}/win32/inst_firewall.nsh")
#                string(REPLACE "/" "\\\\" rem_inst_firewall_path ${rem_inst_firewall_path})
#                set(CPACK_NSIS_EXTRA_INSTALL_COMMANDS "${CPACK_NSIS_EXTRA_INSTALL_COMMANDS}\n !include ${rem_inst_firewall_path}")

#                set(rem_uninst_firewall_path "${CMAKE_CURRENT_SOURCE_DIR}/win32/uninst_firewall.nsh")
#                string(REPLACE "/" "\\\\" rem_uninst_firewall_path ${rem_uninst_firewall_path})
#                set(CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS "${CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS}\n !include ${rem_uninst_firewall_path}")
#	endif()
endif()


if(INSTALL_RUNTIME_LIBS)
#	if(LANDEYE AND NSL_LIBRARY AND LANDSERVER_ONLY)
#		install(FILES ${NSL_LIBRARY} DESTINATION ${LIBDIR})
#	endif()
	if(HOST STREQUAL linux AND SPEC STREQUAL astra)
		if(OPENCV_LIBRARIES AND LANDCLIENT_ONLY)
			foreach(ocv_lib ${OPENCV_LIBRARIES})
				get_filename_component(OPENCV_LIBRARY_DIR ${ocv_lib} PATH)
				get_filename_component(OPENCV_LIBRARY_NAME ${ocv_lib} NAME)
				file(GLOB ocv_libs ${OPENCV_LIBRARY_DIR}/${OPENCV_LIBRARY_NAME}*)
				install(FILES ${ocv_libs} DESTINATION ${LIBDIR})
			endforeach()
		endif()
		if(TURBOJPEG_LIBRARY AND LANDSERVER_ONLY)
			get_filename_component(TURBOJPEG_LIBRARY_DIR ${TURBOJPEG_LIBRARY} PATH)
			get_filename_component(TURBOJPEG_LIBRARY_NAME ${TURBOJPEG_LIBRARY} NAME)
			file(GLOB tjpeg_libs ${TURBOJPEG_LIBRARY_DIR}/${TURBOJPEG_LIBRARY_NAME}*)
			install(FILES ${tjpeg_libs} DESTINATION ${LIBDIR})
		endif()
		if(EXIV2_LIBRARY AND LANDCLIENT_ONLY)
			foreach(exiv_lib ${EXIV2_LIBRARY})
				get_filename_component(EXIV2_LIBRARY_DIR ${exiv_lib} PATH)
				get_filename_component(EXIV2_LIBRARY_NAME ${exiv_lib} NAME)
				file(GLOB exiv_libs ${EXIV2_LIBRARY_DIR}/${EXIV2_LIBRARY_NAME}*)
				install(FILES ${exiv_libs} DESTINATION ${LIBDIR})
			endforeach()
		endif()
	endif()
	if(WIN32)
		if(NOT USE_QT5 AND QSERIAL_LIBRARY AND (BOARD OR LANDSERVER_ONLY))
			foreach(qserial_lib ${QSERIAL_LIBRARY})
				get_filename_component(QSERIAL_LIBRARY_DIR ${qserial_lib} PATH)
				get_filename_component(QSERIAL_LIBRARY_NAME ${qserial_lib} NAME_WE)
				string(REPLACE lib "" QSERIAL_LIBRARY_NAME_NEW ${QSERIAL_LIBRARY_NAME})
				file(GLOB qserial_libs ${QSERIAL_LIBRARY_DIR}/${QSERIAL_LIBRARY_NAME_NEW}.dll)
				install(FILES ${qserial_libs} DESTINATION ${LIBDIR})
			endforeach()
		endif()
		if(LANDEYE AND SDL2_LIBRARY AND LANDCLIENT_ONLY)
			get_filename_component(SDL2_LIBRARY_DIR ${SDL2_LIBRARY} PATH)
			get_filename_component(SDL2_LIBRARY_NAME ${SDL2_LIBRARY} NAME_WE)
			string(REPLACE lib "" SDL2_LIBRARY_NAME_NEW ${SDL2_LIBRARY_NAME})
			file(GLOB sdl2_libs ${SDL2_LIBRARY_DIR}/${SDL2_LIBRARY_NAME_NEW}.dll)
			install(FILES ${sdl2_libs} DESTINATION ${LIBDIR})
		endif()
		if(FFMPEG_LIBRARIES AND LANDCLIENT_ONLY)
			foreach(ffmpeg_lib ${FFMPEG_LIBRARIES})
				get_filename_component(FFMPEG_LIBRARY_DIR ${ffmpeg_lib} PATH)
				file(GLOB ffmpeg_libs ${FFMPEG_LIBRARY_DIR}/*.dll)
				install(FILES ${ffmpeg_libs} DESTINATION ${LIBDIR})
			endforeach()
		endif()
		if(OPENCV_LIBRARIES AND LANDCLIENT_ONLY)
			if (MSVC)
				foreach(ocv_lib ${OPENCV_LIBRARIES})
					get_filename_component(OPENCV_LIBRARY_DIR ${ocv_lib} PATH)
					file(GLOB ocv_libs ${OPENCV_LIBRARY_DIR}/*.dll)
					install(FILES ${ocv_libs} DESTINATION ${LIBDIR})
				endforeach()
			else()
				foreach(ocv_lib ${OPENCV_LIBRARIES})
					install(FILES ${ocv_lib} DESTINATION ${LIBDIR})
				endforeach()
			endif()
		endif()
		if (MSVC)
			if(EXIV2_LIBRARY AND LANDCLIENT_ONLY)
				foreach(exiv_lib ${EXIV2_LIBRARY})
					get_filename_component(EXIV2_LIBRARY_DIR ${exiv_lib} PATH)
					get_filename_component(EXIV2_LIBRARY_NAME ${exiv_lib} NAME)
					file(GLOB exiv_libs ${EXIV2_LIBRARY_DIR}/*.dll)
					install(FILES ${exiv_libs} DESTINATION ${LIBDIR})
				endforeach()
			endif()
		endif()

		if (QTAV_LIBRARIES AND QTAVWIDGETS_LIBRARIES)
			foreach(qtavwidget_lib ${QTAVWIDGETS_LIBRARIES})
				get_filename_component(QTAVWIDGET_LIBRARY_DIR ${qtavwidget_lib} PATH)
				get_filename_component(QTAVWIDGET_LIBRARY_NAME ${qtavwidget_lib} NAME_WE)
				string(REPLACE lib "" QTAVWIDGET_LIBRARY_NAME ${QTAVWIDGET_LIBRARY_NAME})
				file(GLOB qtavwidgets_libs ${QTAVWIDGET_LIBRARY_DIR}/${QTAVWIDGET_LIBRARY_NAME}*.dll)
				install(FILES ${qtavwidgets_libs} DESTINATION ${LIBDIR})
			endforeach()
		endif()
	endif()

endif()

include(CPack)
